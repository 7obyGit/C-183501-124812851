function MODULE_entrypoints_scripts_task_digRegion()
	local args = {...}
	local directions = {left = 0, forward = 0, right = 0, down = 0, up = 0}
	local function parseArguments()
	    for i = 1, #args, 2 do
	        local dir = args[i]
	        local dist = tonumber(args[i + 1])
	        if directions[dir] ~= nil then
	            directions[dir] = dist
	        else
	            print("Invalid argument: " .. dir)
	            return false
	        end
	    end
	    return true
	end
	local function digForward()
	    while not turtle.forward() do
	        turtle.dig()
	        sleep(0.2)
	    end
	end
	local function digUp()
	    while not turtle.up() do
	        turtle.digUp()
	        sleep(0.2)
	    end
	end
	local function digDown()
	    while not turtle.down() do
	        turtle.digDown()
	        sleep(0.2)
	    end
	end
	local function mineLayer(width, length)
	    for row = 1, length do
	        for col = 1, width - 1 do
	            digForward()
	        end
	        if row < length then
	            if row % 2 == 1 then
	                turtle.turnRight()
	                digForward()
	                turtle.turnRight()
	            else
	                turtle.turnLeft()
	                digForward()
	                turtle.turnLeft()
	            end
	        end
	    end
	    if length % 2 == 1 then
	        turtle.turnLeft()
	        turtle.turnLeft()
	        for i = 1, width - 1 do
	            digForward()
	        end
	    end
	end
	local function returnToStart(height)
	    turtle.turnLeft()
	    turtle.turnLeft()
	    for i = 1, directions.forward do
	        digForward()
	    end
	    turtle.turnRight()
	    for i = 1, directions.left do
	        digForward()
	    end
	    if height > 0 then
	        for i = 1, height do
	            digUp()
	        end
	    elseif height < 0 then
	        for i = 1, -height do
	            digDown()
	        end
	    end
	    turtle.turnRight()
	end
	local function main()
	    if not parseArguments() then
	        print("Usage: ./dig.lua <direction> <distance> ...")
	        return
	    end
	    local width = directions.left + directions.right + 1
	    local length = directions.forward
	    local height = directions.up - directions.down
	    for level = 1, math.abs(height) + 1 do
	        mineLayer(width, length)
	        if level <= math.abs(height) then
	            if height > 0 then
	                digUp()
	            else
	                digDown()
	            end
	        end
	    end
	    returnToStart(height)
	    print("Mining complete!")
	end
	main()
end
local entrypoints_scripts_task_digRegion = MODULE_entrypoints_scripts_task_digRegion()