function MODULE_entrypoints_scripts_task_digRegion()
	local function parse_args()
	    local commands = {}
	    local i = 1
	    while i <= #arg do
	        local direction = arg[i]
	        local count = tonumber(arg[i + 1])
	        if not count then
	            print("Error: Expected number after direction " .. direction)
	            return nil
	        end
	        table.insert(commands, {direction = direction, count = count})
	        i = i + 2
	    end
	    return commands
	end
	local facing = 0  -- 0 = initial direction, 1 = right, 2 = backward, 3 = left
	local function turn_to(target_facing)
	    while facing ~= target_facing do
	        turtle.turnRight()
	        facing = (facing + 1) % 4
	    end
	end
	local function restore_facing()
	    turn_to(0)
	end
	local function mine_layer(width, length)
	    local going_right = true
	    for w = 1, width do
	        for l = 1, length - 1 do
	            turtle.dig()
	            turtle.forward()
	        end
	        if w < width then
	            if going_right then
	                turtle.turnRight()
	                turtle.dig()
	                turtle.forward()
	                turtle.turnRight()
	            else
	                turtle.turnLeft()
	                turtle.dig()
	                turtle.forward()
	                turtle.turnLeft()
	            end
	            going_right = not going_right
	        end
	    end
	    if width % 2 == 0 then
	        turn_to(2)  -- Face backward
	        for l = 1, length - 1 do
	            turtle.forward()
	        end
	        turn_to(3)  -- Face left
	        for w = 1, width - 1 do
	            turtle.forward()
	        end
	        restore_facing()
	    else
	        turn_to(3)  -- Face left
	        for w = 1, width - 1 do
	            turtle.forward()
	        end
	        restore_facing()
	    end
	end
	local function excavate_volume(length, width, height)
	    local starting_height = height
	    for h = 1, height do
	        mine_layer(width, length)
	        if h < height then
	            turtle.digDown()
	            turtle.down()
	        end
	    end
	    for h = 1, height - 1 do
	        turtle.up()
	    end
	end
	local commands = parse_args()
	if not commands or #commands ~= 3 then
	    print("Usage: dig.lua <forward> <blocks> <right/left> <blocks> <down> <blocks>")
	    print("Example: dig.lua forward 5 right 3 down 2")
	    return
	end
	local length, width, height = 0, 0, 0
	local valid_commands = true
	for _, cmd in ipairs(commands) do
	    if cmd.direction == "forward" then
	        length = cmd.count
	    elseif cmd.direction == "right" or cmd.direction == "left" then
	        width = cmd.count
	    elseif cmd.direction == "down" then
	        height = cmd.count
	    else
	        print("Invalid direction: " .. cmd.direction)
	        valid_commands = false
	        break
	    end
	end
	if not valid_commands or length == 0 or width == 0 or height == 0 then
	    print("Please specify exactly one forward, one right/left, and one down dimension")
	    return
	end
	print(string.format("Mining volume: %d x %d x %d", length, width, height))
	excavate_volume(length, width, height)
	print("Mining complete!")
end
local entrypoints_scripts_task_digRegion = MODULE_entrypoints_scripts_task_digRegion()