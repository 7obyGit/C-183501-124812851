function MODULE_utils_other_file()
	return {
	    readText = function (path)
	        local file = fs.open(path, "r")
	        if file == nil then
	            return nil
	        end
	        local content = file.readAll()
	        file.close()
	        return content
	    end,
	    writeText = function (path, content)
	        local file = fs.open(path, "w")
	        file.write(content)
	        file.close()
	    end,
	}
end
local utils_other_file = MODULE_utils_other_file()


function MODULE_jobs_Job()
	local Job = {}
	Job.EXAMPLE = "ExampleJob"
	Job.IDLE = "IdleJob"
	Job.SETUP = "SetupJob"
	Job.PROGRAMMABLE_JOB = "ProgrammableJob"
	Job.QUARRY = "QuarryJob"
	Job.TREE_FARM = "TreeFarmJob"
	Job.STORAGE = "StorageJob"
	Job.TABLET_CONTROLLER = "TabletControllerJob"
	Job.SCANNER = "ScannerJob"
	return Job
end
local jobs_Job = MODULE_jobs_Job()


function MODULE_utils_config_JobConfig()
	local file = utils_other_file
	local Job       = jobs_Job
	local JobConfig = {}
	JobConfig.__index = JobConfig
	function JobConfig.new()
	    local self = setmetatable({
	        name = "My Computer",
	        job = Job.IDLE,
	        state = {},  -- Data specific to a job that is saved between runs
	    }, JobConfig)
	    return self
	end
	function JobConfig.fromTable(table)
	    local self = JobConfig.new()
	    self.name = table.name or self.name
	    self.job = table.job or self.job
	    self.state = table.state or self.state
	    return self
	end
	function JobConfig:toTable()
	    return {
	        name = self.name,
	        job = self.job,
	        state = self.state,
	    }
	end
	function JobConfig:serializeJson()
	    return textutils.serialize(self:toTable())
	end
	function JobConfig.deserializeJson(json)
	    local success, configAttributes = pcall(textutils.unserialize, json)
	    if not success or configAttributes == nil then
	        configAttributes = textutils.unserializeJSON(json)
	    end
	    local config = JobConfig.fromTable(configAttributes)
	    return config
	end
	function JobConfig:save()
	    file.writeText("job.json", self:serializeJson())
	end
	function JobConfig.load()
	    local config = nil
	    local content = file.readText("job.json")
	    if content == nil then
	        config = JobConfig.new()
	    else
	        config = JobConfig.deserializeJson(content)
	    end
	    config:save()  -- Save any default values that were missing
	    return config
	end
	function JobConfig:get(key, defaultValue)
	    return self.state[key] or defaultValue
	end
	function JobConfig:set(key, value)
	    self.state[key] = value
	    self:save()
	end
	function JobConfig:init(key, defaultValue)
	    if self:get(key, nil) == nil then
	        self:set(key, defaultValue)
	    end
	end
	function JobConfig:getNext(key, defaultValue)
	    local list = self:get(key, {})
	    if #list == 0 then
	        return defaultValue
	    end
	    local value = table.remove(list, 1)
	    if #list > 0 then
	        self:set(key, list)
	    else
	        self:set(key, nil)
	    end
	    return value
	end
	function JobConfig:dequeue(key, defaultValue)
	    return self:getNext(key, defaultValue)
	end
	function JobConfig:enqueue(key, value)
	    local list = self:get(key, {})
	    table.insert(list, value)
	    self:set(key, list)
	end
	return JobConfig
end
local utils_config_JobConfig = MODULE_utils_config_JobConfig()


function MODULE_utils_controlflow_Parallel()
	local Parallel = {}
	Parallel.__index = Parallel
	function Parallel.new()
	    local self = setmetatable({}, Parallel)
	    self.tasks = {}
	    return self
	end
	function Parallel:addTask(task)
	    table.insert(self.tasks, task)
	    return self
	end
	function Parallel:addTimeout(timeoutSeconds)
	    table.insert(self.tasks, function() os.sleep(timeoutSeconds) end)
	    return self
	end
	function Parallel:run()
	    parallel.waitForAll(table.unpack(self.tasks))
	    return self
	end
	function Parallel:waitForAny()
	    parallel.waitForAny(table.unpack(self.tasks))
	    return self
	end
	function Parallel:waitForAll()
	    parallel.waitForAll(table.unpack(self.tasks))
	    return self
	end
	function Parallel.map(obj, func)
	    if type(obj) == "table" then
	        if #obj > 0 then
	            return Parallel.mapList(obj, func)
	        else
	            return Parallel.mapTable(obj, func)
	        end
	    else
	        return Parallel.mapList(obj, func)
	    end
	end
	function Parallel.mapList(list, func)
	    local parallel = Parallel.new()
	    for _, item in ipairs(list) do
	        if item ~= nil then
	            parallel:addTask(function() func(item) end)
	        end
	    end
	    parallel:run()
	end
	function Parallel.mapTable(table_, func)
	    local parallel = Parallel.new()
	    for key, item in pairs(table_) do
	        if item ~= nil then
	            parallel:addTask(function() func(key, item) end)
	        end
	    end
	    parallel:run()
	end
	return Parallel
end
local utils_controlflow_Parallel = MODULE_utils_controlflow_Parallel()


function MODULE_utils_libs_LibOs()
	local LibOs = {}
	function LibOs.getComputerID()
	    return os.getComputerID()
	end
	function LibOs.getComputerLabel()
	    return os.getComputerLabel()
	end
	function LibOs.setComputerLabel(label)
	    return os.setComputerLabel(label)
	end
	function LibOs.sleep(time)
	    os.sleep(time)
	end
	function LibOs.pullEvent(filter)
	    return os.pullEvent(filter)
	end
	function LibOs.queueEvent(name, ...)
	    return os.queueEvent(name, ...)
	end
	function LibOs.run(env, path, ...)
	    return os.run(env, path, ...)
	end
	function LibOs.version()
	    return os.version()
	end
	function LibOs.shutdown()
	    return os.shutdown()
	end
	function LibOs.reboot()
	    return os.reboot()
	end
	function LibOs.getSecondsSinceComputerStart()
	    return os.clock()
	end
	function LibOs.time(locale)
	    return os.time(locale)
	end
	function LibOs.date(format, time)
	    return os.date(format, time)
	end
	function LibOs.day(...)
	    return os.day(...)
	end
	function LibOs.epoch(...)
	    return os.epoch(...)
	end
	return LibOs
end
local utils_libs_LibOs = MODULE_utils_libs_LibOs()


function MODULE_utils_network_Network()
	local Parallel = utils_controlflow_Parallel
	local LibOs = utils_libs_LibOs
	local Network = {}
	peripheral.find("modem", rednet.open)
	function Network.isOpen()
	    return rednet.isOpen()
	end
	function Network.host(protocol, hostname)
	    if not Network.isOpen() then return print("Network is not open") end
	    hostname = hostname or ("computer:" .. LibOs.getComputerID())
	    rednet.host(protocol, hostname)
	end
	function Network.lookup(protocol, hostname)
	    if not Network.isOpen() then return print("Network is not open") end
	    return rednet.lookup(protocol, hostname)
	end
	function Network.unhost(protocol)
	    if not Network.isOpen() then return print("Network is not open") end
	    rednet.unhost(protocol)
	end
	function Network.listenWithProtocols(protocols)
	    if not Network.isOpen() then return print("Network is not open") end
	    Parallel.map(protocols, function(key, protocol) protocol:listen() end)
	end
	function Network.listen(protocol, timeout, func)
	    if not Network.isOpen() then return print("Network is not open") end
	    while true do
	        local senderId, message = rednet.receive(protocol, timeout)
	        func(senderId, message)
	    end
	end
	function Network.send(recipient, message, protocol)
	    if not Network.isOpen() then return print("Network is not open") end
	    rednet.send(recipient, message, protocol)
	end
	function Network.broadcast(message, protocol)
	    if not Network.isOpen() then return print("Network is not open") end
	    rednet.broadcast(message, protocol)
	end
	return Network
end
local utils_network_Network = MODULE_utils_network_Network()


function MODULE_jobs_JobManager()
	local JobConfig = utils_config_JobConfig
	local Network = utils_network_Network
	local Parallel = utils_controlflow_Parallel
	local LibOs = utils_libs_LibOs
	local JobManager = {}
	function JobManager.run(jobClass)
	    local config = JobConfig.load()
	    config.job = jobClass.name
	    config:save()
	    local job = jobClass.new(config)
	    job.name = jobClass.name .. ":" .. LibOs.getComputerID()
	    job.log = function(...) print(...) job.logSilent(...) end
	    job.logSilent = function(...) if job.protocols ~= nil then job.protocols.log:sendLog(...) end end
	    job.logToChannel = function(channel, ...) if job.protocols ~= nil then job.protocols.log:sendLogToChannel(channel, ...) end end
	    if job == nil then
	        print("Job not found: " .. jobClass.name)
	        return
	    end
	    print("Starting Job: " .. jobClass.name)
	    job:onStart()
	    local p = Parallel.new()
	    p:addTask(function() JobManager.runForegroundTask(job, config, jobClass.name) end)
	    if job.protocols ~= nil then
	        if Network.isOpen() then
	            p:addTask(function() Network.listenWithProtocols(job.protocols) end)
	        else
	            print("Network is not open - cannot use protocols defined for job")
	        end
	    end
	    if job.backgroundTasks ~= nil then
	        for _, backgroundTask in ipairs(job.backgroundTasks) do
	            p:addTask(function() backgroundTask(job, config) end)
	        end
	    end
	    p:addTask(function() JobManager.runBackgroundTask(job, config) end)
	    p:waitForAny()
	    job:onComplete()
	    print("Completed Job: " .. jobClass.name)
	    config:save()
	end
	function JobManager.runForegroundTask(job, config, name)
	    print("Running Job: " .. name)
	    while job:inProgress() do
	        job:onStep()
	    end
	end
	function JobManager.runBackgroundTask(job, config)
	    if job.backgroundTask == nil then
	        return
	    end
	    if job.backgroundDelay == nil then
	        error("Background task defined without a job.backgroundDelay")
	    end
	    while job:inProgress() do
	        job.backgroundTask()
	        if job.backgroundDelay > 0 then
	            os.sleep(job.backgroundDelay)
	        end
	    end
	end
	return JobManager
end
local jobs_JobManager = MODULE_jobs_JobManager()


function MODULE_jobs_definitions_misc_ExampleJob()
	local Job = jobs_Job
	local ExampleJob = {}
	ExampleJob.__index = ExampleJob
	ExampleJob.name = Job.EXAMPLE
	function ExampleJob.new(config)
	    local self = setmetatable({}, ExampleJob)
	    self.backgroundTask = function() self:onBackgroundStep() end
	    self.backgroundDelay = 5  -- This task should be infrequent
	    self.config = config
	    self.states = {
	        EXAMPLE_STATE = "EXAMPLE_STATE",
	    }
	    return self
	end
	function ExampleJob:onStart()
	    self.config:set("alive", true)
	end
	function ExampleJob:onResume()
	end
	function ExampleJob:inProgress()
	    return self.config:get("alive", false)
	end
	function ExampleJob:onStep()
	    self.config:set("alive", false)
	end
	function ExampleJob:onBackgroundStep()
	end
	function ExampleJob:onComplete()
	end
	return ExampleJob
end
local jobs_definitions_misc_ExampleJob = MODULE_jobs_definitions_misc_ExampleJob()


function MODULE_entrypoints_example()
	local JobManager = jobs_JobManager
	local ExampleJob = jobs_definitions_misc_ExampleJob
	JobManager.run(ExampleJob)
end
local entrypoints_example = MODULE_entrypoints_example()