function MODULE_utils_other_file()
	return {
	    readText = function (path)
	        local file = fs.open(path, "r")
	        if file == nil then
	            return nil
	        end
	        local content = file.readAll()
	        file.close()
	        return content
	    end,
	    writeText = function (path, content)
	        local file = fs.open(path, "w")
	        file.write(content)
	        file.close()
	    end,
	}
end
local utils_other_file = MODULE_utils_other_file()


function MODULE_jobs_Job()
	local Job = {}
	Job.EXAMPLE = "ExampleJob"
	Job.IDLE = "IdleJob"
	Job.SETUP = "SetupJob"
	Job.PROGRAMMABLE_JOB = "ProgrammableJob"
	Job.QUARRY = "QuarryJob"
	Job.TREE_FARM = "TreeFarmJob"
	Job.STORAGE = "StorageJob"
	Job.TABLET_CONTROLLER = "TabletControllerJob"
	return Job
end
local jobs_Job = MODULE_jobs_Job()


function MODULE_utils_config_JobConfig()
	local file = utils_other_file
	local Job       = jobs_Job
	local JobConfig = {}
	JobConfig.__index = JobConfig
	function JobConfig.new()
	    local self = setmetatable({
	        name = "My Computer",
	        job = Job.IDLE,
	        state = {},  -- Data specific to a job that is saved between runs
	    }, JobConfig)
	    return self
	end
	function JobConfig.fromTable(table)
	    local self = JobConfig.new()
	    self.name = table.name or self.name
	    self.job = table.job or self.job
	    self.state = table.state or self.state
	    return self
	end
	function JobConfig:toTable()
	    return {
	        name = self.name,
	        job = self.job,
	        state = self.state,
	    }
	end
	function JobConfig:serializeJson()
	    return textutils.serialize(self:toTable())
	end
	function JobConfig.deserializeJson(json)
	    local success, configAttributes = pcall(textutils.unserialize, json)
	    if not success or configAttributes == nil then
	        configAttributes = textutils.unserializeJSON(json)
	    end
	    local config = JobConfig.fromTable(configAttributes)
	    return config
	end
	function JobConfig:save()
	    file.writeText("job.json", self:serializeJson())
	end
	function JobConfig.load()
	    local config = nil
	    local content = file.readText("job.json")
	    if content == nil then
	        config = JobConfig.new()
	    else
	        config = JobConfig.deserializeJson(content)
	    end
	    config:save()  -- Save any default values that were missing
	    return config
	end
	function JobConfig:get(key, defaultValue)
	    return self.state[key] or defaultValue
	end
	function JobConfig:set(key, value)
	    self.state[key] = value
	    self:save()
	end
	function JobConfig:init(key, defaultValue)
	    if self:get(key, nil) == nil then
	        self:set(key, defaultValue)
	    end
	end
	function JobConfig:getNext(key, defaultValue)
	    local list = self:get(key, {})
	    if #list == 0 then
	        return defaultValue
	    end
	    local value = table.remove(list, 1)
	    if #list > 0 then
	        self:set(key, list)
	    else
	        self:set(key, nil)
	    end
	    return value
	end
	function JobConfig:dequeue(key, defaultValue)
	    return self:getNext(key, defaultValue)
	end
	function JobConfig:enqueue(key, value)
	    local list = self:get(key, {})
	    table.insert(list, value)
	    self:set(key, list)
	end
	return JobConfig
end
local utils_config_JobConfig = MODULE_utils_config_JobConfig()


function MODULE_utils_controlflow_Parallel()
	local Parallel = {}
	Parallel.__index = Parallel
	function Parallel.new()
	    local self = setmetatable({}, Parallel)
	    self.tasks = {}
	    return self
	end
	function Parallel:addTask(task)
	    table.insert(self.tasks, task)
	end
	function Parallel:run()
	    parallel.waitForAll(table.unpack(self.tasks))
	end
	function Parallel:waitForAny()
	    parallel.waitForAny(table.unpack(self.tasks))
	end
	function Parallel:waitForAll()
	    parallel.waitForAll(table.unpack(self.tasks))
	end
	function Parallel.map(obj, func)
	    if type(obj) == "table" then
	        if #obj > 0 then
	            return Parallel.mapList(obj, func)
	        else
	            return Parallel.mapTable(obj, func)
	        end
	    else
	        return Parallel.mapList(obj, func)
	    end
	end
	function Parallel.mapList(list, func)
	    local parallel = Parallel.new()
	    for _, item in ipairs(list) do
	        if item ~= nil then
	            parallel:addTask(function() func(item) end)
	        end
	    end
	    parallel:run()
	end
	function Parallel.mapTable(table_, func)
	    local parallel = Parallel.new()
	    for key, item in pairs(table_) do
	        if item ~= nil then
	            parallel:addTask(function() func(key, item) end)
	        end
	    end
	    parallel:run()
	end
	return Parallel
end
local utils_controlflow_Parallel = MODULE_utils_controlflow_Parallel()


function MODULE_jobs_JobManager()
	local JobConfig = utils_config_JobConfig
	local Job = jobs_Job
	local Parallel = utils_controlflow_Parallel
	local JobManager = {}
	function JobManager.run(jobClass)
	    local config = JobConfig.load()
	    config.job = jobClass.name
	    config:save()
	    local job = jobClass.new(config)
	    if job == nil then
	        print("Job not found: " .. jobClass.name)
	        return
	    end
	    print("Starting Job: " .. jobClass.name)
	    job:onStart()
	    local p = Parallel.new()
	    p:addTask(function() JobManager.runForegroundTask(job, config, jobClass.name) end)
	    p:addTask(function() JobManager.runBackgroundTask(job, config) end)
	    p:waitForAny()
	    job:onComplete()
	    print("Completed Job: " .. jobClass.name)
	    config:save()
	end
	function JobManager.runForegroundTask(job, config, name)
	    print("Running Job: " .. name)
	    while job:inProgress() do
	        job:onStep()
	    end
	end
	function JobManager.runBackgroundTask(job, config)
	    if job.backgroundTask == nil then
	        return
	    end
	    if job.backgroundDelay == nil then
	        error("Background task defined without a job.backgroundDelay")
	    end
	    while job:inProgress() do
	        job.backgroundTask()
	        if job.backgroundDelay > 0 then
	            os.sleep(job.backgroundDelay)
	        end
	    end
	end
	return JobManager
end
local jobs_JobManager = MODULE_jobs_JobManager()


function MODULE_entrypoints_setup()
	local JobManager = jobs_JobManager
	local Job = jobs_Job
	JobManager.run(Job.SETUP)
end
local entrypoints_setup = MODULE_entrypoints_setup()